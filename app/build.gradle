apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
//keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.2'
    defaultConfig {
        applicationId "org.socratic.android"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 31
        versionName "1.8"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "boolean", "REPORT_CRASHES", "false"
        buildConfigField "boolean", "REPORT_ANALYTICS", "true"
        buildConfigField "boolean", "LOG_HTTP_REQUESTS", "false"
        buildConfigField "boolean", "LOG_CAMERA_UTILS", "false"
        buildConfigField "boolean", "SHOW_APP_UPDATES", "false"
        buildConfigField "boolean", "SKIP_API_FOR_PHOTO", "false"
        buildConfigField "boolean", "WRITE_DEBUG_IMAGE_CAPTURE_TO_DISK", "false"

//        resValue 'string', "facebook_app_id", SOCRATIC_ANDROID_FACEBOOK_APP_ID
//        resValue 'string', "facebook_client_token", SOCRATIC_ANDROID_FACEBOOK_CLIENT_TOKEN

        //specify supported languages
        resConfigs "en", "fr", "id", "pt", "es", "de"
    }
    signingConfigs {
        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile file(keystoreProperties['storeFile'])
//            storePassword keystoreProperties['storePassword']
        }
    }

    repositories {
        maven {
            url "https://s3.amazonaws.com/repo.commonsware.com"
        }
    }

    buildTypes {

        def API_PATH = "/api/v2"

        alpha {
            debuggable true
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "REPORT_CRASHES", "true"
            buildConfigField "boolean", "REPORT_ANALYTICS", "false"
            buildConfigField "boolean", "LOG_HTTP_REQUESTS", "true"
            buildConfigField "boolean", "LOG_CAMERA_UTILS", "true"
            buildConfigField "boolean", "SHOW_APP_UPDATES", "true"
            buildConfigField "boolean", "WRITE_DEBUG_IMAGE_CAPTURE_TO_DISK", "true"
//            buildConfigField 'String', "APPSEE_API_KEY", SOCRATIC_ANDROID_DEBUG_APPSEE_KEY

            // copy paste the lines below for every new greek-letter build.
            // update these lines
            def API_HOST = "https://socratic.org"
//            versionNameSuffix '-ALPHA'
//            applicationIdSuffix '.alpha'
            // don't update these lines
            buildConfigField "String", "API_HOST", "\"${API_HOST}\""
//            buildConfigField "String", "API_BASE", "\"${API_HOST}${API_PATH}\""

            multiDexEnabled true

            matchingFallbacks = ['debug']
        }

        debug {
            // since we are forced to have a build variant called `debug`,
            // let's make it exactly the same as `alpha`
//            def API_PATH = "/api/v2"

            def API_HOST = "https://socratic.org"
            buildConfigField "String", "API_BASE", "\"${API_HOST}${API_PATH}\""

            initWith alpha
        }

//        beta {
//            initWith alpha
//
//            def API_HOST = "https://beta.socratic.org"
//            versionNameSuffix '-BETA'
//            applicationIdSuffix '.beta'
//            // don't update these lines
//            buildConfigField "String", "API_HOST", "\"${API_HOST}\""
//            buildConfigField "String", "API_BASE", "\"${API_HOST}${API_PATH}\""
//        }
//
//        gamma {
//            initWith alpha
//
//            def API_HOST = "https://gamma.socratic.org"
//            versionNameSuffix '-GAMMA'
//            applicationIdSuffix '.gamma'
//            // don't update these lines
//            buildConfigField "String", "API_HOST", "\"${API_HOST}\""
//            buildConfigField "String", "API_BASE", "\"${API_HOST}${API_PATH}\""
//        }

        release {
//            def API_HOST = "https://socratic.org"
//            buildConfigField "String", "API_HOST", "\"${API_HOST}\""
//            buildConfigField "String", "API_BASE", "\"${API_HOST}${API_PATH}\""
//            buildConfigField 'String', "APPSEE_API_KEY", SOCRATIC_ANDROID_RELEASE_APPSEE_KEY
//            signingConfig signingConfigs.release
            minifyEnabled true
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled false
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
}

def computeVersionDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHH')
    return formattedDate
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.0.2'
    implementation 'com.android.support:cardview-v7:27.0.2'
    implementation 'com.android.support:design:27.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:recyclerview-v7:27.0.2'
    implementation 'com.android.support:multidex:1.0.2'
    implementation 'com.android.support:support-v4:27.0.2'

    //3rd Party dependencies
    implementation 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation group: 'joda-time', name: 'joda-time', version: '2.9.9'
//    implementation 'com.facebook.android:account-kit-sdk:4.+'

    implementation 'uk.co.chrisjenx:calligraphy:2.2.0'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.3.0'
    implementation 'me.zhanghai.android.materialratingbar:library:1.0.2'
    implementation 'nl.dionsegijn:konfetti:1.0.2'

    implementation 'com.google.firebase:firebase-core:11.8.0'
    implementation 'com.google.firebase:firebase-messaging:11.8.0'
    implementation 'com.google.android.gms:play-services-gcm:11.8.0'
    implementation 'com.google.android.gms:play-services-auth-base:11.8.0'
    implementation 'com.google.android.gms:play-services-auth:11.8.0'

    implementation 'com.appsee:appsee-android:+'
    implementation 'com.github.stfalcon:chatkit:0.2.2'
    implementation 'com.jaedongchicken:ytplayer:1.4.2'
    implementation 'com.commonsware.cwac:anddown:0.4.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
        transitive = true;
    }
    implementation 'com.amplitude:android-sdk:2.13.4'

    //Test dependencies
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    androidTestImplementation 'com.android.support:multidex:1.0.2'
    androidTestImplementation 'com.android.support:multidex-instrumentation:1.0.2'

    implementation project(':jlatexandroid')
}

apply plugin: 'com.google.gms.google-services'
